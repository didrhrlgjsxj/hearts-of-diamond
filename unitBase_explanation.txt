### `unitBase.js` 파일 기능 설명

이 파일은 프로젝트의 모든 유닛 객체에 대한 핵심 기반이 되는 `Unit` 클래스를 정의합니다. 다른 모든 구체적인 유닛 클래스(여단, 대대, 중대 등)는 이 `Unit` 클래스를 상속받아 만들어집니다. 즉, 게임에 등장하는 모든 부대의 공통적인 속성과 행동의 설계도라고 할 수 있습니다.

---

#### **`Unit` 클래스의 주요 기능**

1.  **기본 속성 (Properties)**
    *   **식별 정보**: `name`(이름), `type`(유닛 종류), `team`(소속 팀), `size`(아이콘 크기) 등 유닛을 구별하는 기본 정보를 가집니다.
    *   **위치 및 이동**: `_x`, `_y`(좌표), `destination`(목표 지점), `direction`(바라보는 방향), `moveSpeed`(이동 속도) 등 위치와 이동에 관련된 정보를 관리합니다.
    *   **계층 구조**: `subUnits`(하위 부대 목록), `parent`(상위 부대 참조)를 통해 부대 간의 지휘 체계를 구성합니다. `isHQ` 속성으로 부대가 본부(HQ)인지 여부를 표시합니다.
    *   **상태 정보**: `isSelected`(선택 여부), `isRetreating`(후퇴 여부) 등 유닛의 현재 상태를 저장합니다.

2.  **병력 및 능력치 (Stats)**
    *   **병력**: `_baseStrength`(기본 병력), `damageTaken`(받은 피해), `reinforcementLevel`(증강 레벨)을 통해 `currentStrength`(현재 병력)를 계산합니다. 하위 부대가 있으면 모든 하위 부대의 병력을 합산하여 자신의 병력으로 삼습니다.
    *   **전투 능력치**: `firepower`(화력), `softAttack`(대인 공격력), `hardAttack`(대물 공격력), `reconnaissance`(정찰력), `armor`(장갑) 등 개별 전투 능력치를 가집니다.
    *   **종합 능력치 (Total Stats)**: `totalFirepower`, `totalReconnaissance` 와 같이 `total`이 붙은 속성들은 하위 부대들의 능력치를 모두 합산하거나 평균을 내어 상위 부대의 종합 능력치를 실시간으로 계산합니다. 예를 들어, 여단의 총 정찰력은 소속된 모든 분대의 정찰력을 합한 값이 됩니다.
    *   **조직력 (Organization)**: 전투 지속력을 나타내는 `organization`과 `maxOrganization`을 가집니다.

3.  **핵심 메서드 (Methods)**
    *   **이동 관련**:
        *   `moveTo(x, y)`: 유닛에게 새로운 이동 목표 지점을 설정합니다.
        *   `retreatTo(x, y)`: 후퇴 상태로 이동 목표를 설정합니다.
        *   `updateMovement(deltaTime)`: 매 프레임마다 목표 지점을 향해 유닛을 이동시킵니다.
    *   **계층 탐색**:
        *   `addUnit(unit)`: 자신의 하위 부대로 다른 유닛을 추가합니다.
        *   `getTopLevelParent()`: 자신의 최상위 지휘관 유닛을 찾아 반환합니다.
        *   `getAllSquads()`, `getAllCompanies()`: 자신 및 자신의 모든 하위 부대에 포함된 특정 종류의 유닛(분대, 중대) 목록을 재귀적으로 찾아 반환합니다.
    *   **선택 및 상호작용**:
        *   `setSelected(selected)`: 유닛의 선택 상태를 변경합니다.
        *   `getUnitAt(x, y)`: 특정 좌표에 이 유닛이 있는지 확인합니다.
    *   **시각적 표현 (Drawing)**:
        *   `draw(ctx)`: 캔버스에 유닛 아이콘, 병력/조직력 바, 이름, 방향 표시선 등 유닛의 모든 시각적 요소를 그립니다. 선택되었거나 특정 상태일 때(예: 전투 중) 시각 효과를 추가합니다.
        *   `drawOwnIcon(ctx)`: 팀 색상과 유닛 타입을 나타내는 사각형 아이콘을 그립니다.
        *   `drawEchelonSymbol(ctx)`: 부대 규모(여단, 대대 등)를 나타내는 기호를 그리는 메서드이며, 실제 구현은 각 하위 클래스에서 이루어집니다.

---

요약하자면, `unitBase.js`는 **부대의 기본 데이터 모델과 공통 기능을 정의**하는 파일입니다. 부대의 '뼈대'를 만들고, 이 뼈대를 바탕으로 `unitEchelons.js` 파일에서 살을 붙여 다양한 규모의 부대를 완성하게 됩니다.
