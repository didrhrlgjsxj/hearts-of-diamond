### `division_templates.js` 파일 기능 설명 (v2)

이 파일은 게임에서 사용될 다양한 부대 편제(Division Template)를 정의하는 '설계도' 모음입니다. 각 템플릿은 사단, 여단, 연대, 대대, 중대 등 특정 규모의 부대를 생성하는 방법을 구체적으로 명시합니다.

이 파일을 통해 복잡한 부대 구조(수십 개의 하위 부대를 포함하는)를 단 몇 줄의 코드로 일관성 있게 생성할 수 있습니다.

---

#### **주요 구조 및 기능**

1.  **`DIVISION_TEMPLATES` 객체**
    *   모든 부대 설계도가 이 하나의 객체 안에 키-값 형태로 저장됩니다.
    *   **키(Key)**: "Infantry Brigade"와 같이 템플릿을 식별하는 고유한 문자열입니다. 이 키는 UI의 유닛 생성 메뉴에서 사용됩니다.
    *   **값(Value)**: 각 템플릿의 세부 정보를 담은 객체입니다.

2.  **템플릿 객체의 속성**
    *   **`name`**: "보병 여단"과 같이 UI에 표시될 템플릿의 이름입니다.
    *   **`unitClass`**: 생성될 최상위 부대의 클래스(`Brigade`, `Battalion` 등)를 지정합니다.
    *   **`build` 함수**: **템플릿의 핵심 로직**입니다. 이 함수는 실제로 부대 인스턴스를 생성하고, 그 아래에 필요한 모든 하위 부대(중대, 소대, 분대)를 재귀적으로 만들어 편제를 완성합니다.

3.  **`build` 함수의 역할**
    *   **본부 우선 생성**: 지휘 부대(여단, 대대)의 경우, `DIVISION_TEMPLATES["HQ Company"]` 템플릿을 먼저 호출하여 본부 중대를 생성합니다.
    *   **지휘 부대 생성**: 생성된 본부 중대의 위치를 기준으로 최상위 지휘 부대 인스턴스(`new Brigade(...)`)를 생성하고, 본부 중대를 편제에 추가합니다.
    *   반복문을 사용하여 정해진 수의 하위 부대들을 생성하고 `addUnit()` 메서드를 통해 상위 부대에 추가합니다.
    *   각 중대에 '선발대', '지원대', '유지대' 등의 역할(`role`)을 할당합니다.
    *   부대 생성이 완료되면, `combatSubUnits` (실제 전투 단위 목록)을 설정하고 `updateCombatSubUnitPositions()`를 호출하여 초기 진형을 설정합니다.
    *   완성된 최상위 부대 객체를 반환합니다.

---

요약하자면, `division_templates.js`는 **복잡한 부대 편제를 표준화하고 자동화하는 공장**과 같습니다. 새로운 종류의 여단이나 대대를 추가하고 싶을 때, 게임의 다른 코드를 건드리지 않고 이곳에 새로운 템플릿 정의만 추가하면 되므로 확장성이 매우 뛰어납니다.

특히, "본부 중대"를 별도의 템플릿으로 분리함으로써, 모든 지휘 부대가 일관된 방식으로 본부를 갖도록 강제하고 코드의 재사용성을 높였습니다.