### `main.js` 파일 기능 설명

이 파일은 게임의 진입점(Entry Point)이자 전체적인 흐름을 관장하는 '메인 컨트롤러'입니다. 게임 루프를 실행하고, 사용자 입력을 처리하며, 다른 모듈(카메라, 유닛, UI 등)의 기능들을 적절한 타이밍에 호출하여 게임이 동작하도록 만듭니다.

---

#### **주요 기능 및 역할**

1.  **게임 초기화 (Initialization)**
    *   HTML에서 `canvas` 요소를 가져와 2D 렌더링 컨텍스트를 설정합니다.
    *   게임에 필요한 전역 변수들(`topLevelUnits`, `selectedUnit` 등)을 선언합니다.
    *   `Camera`와 `GameUI` 클래스의 인스턴스를 생성하여 카메라와 UI 시스템을 초기화합니다.
    *   게임 루프(`loop`)를 최초로 호출하여 게임을 시작합니다.

2.  **메인 게임 루프 (`loop` 함수)**
    *   `requestAnimationFrame`을 사용하여 브라우저의 렌더링 주기에 맞춰 매끄럽게 반복 실행됩니다.
    *   루프가 한 번 돌 때마다 `update()` 함수와 `draw()` 함수를 순서대로 호출합니다. 이는 '상태 업데이트'와 '화면 그리기' 단계를 명확하게 분리하는 일반적인 게임 프로그래밍 패턴입니다.

3.  **상태 업데이트 (`update` 함수)**
    *   **`deltaTime` 계산**: 이전 프레임과 현재 프레임 사이의 시간 간격(초 단위)을 계산합니다. 이를 통해 컴퓨터 성능과 관계없이 모든 게임 내 움직임과 로직이 일정한 속도로 처리되도록 보장합니다.
    *   **카메라 업데이트**: 마우스 위치에 따른 카메라 이동(화면 가장자리 스크롤)을 처리합니다.
    *   **게임 로직 위임**: `unitLogic.js`의 `updateUnits()` 함수를 호출하여 모든 부대의 전투, 이동, 조직력 회복 등 복잡한 로직을 처리하도록 위임합니다.
    *   **정리 작업**: `cleanupDestroyedUnits()` 함수를 호출하여 파괴된(병력이 0 이하인) 부대를 게임 월드에서 제거합니다.

4.  **렌더링 (`draw` 함수)**
    *   **화면 초기화**: 이전 프레임의 잔상이 남지 않도록 캔버스를 깨끗하게 지웁니다.
    *   **카메라 적용**: `camera.applyTransform()`을 호출하여 캔버스의 좌표계를 카메라의 위치와 줌 레벨에 맞게 변환합니다. 이 덕분에 월드의 특정 부분을 확대/축소하거나 이동해서 볼 수 있습니다.
    *   **월드 그리기**: 배경 타일맵을 그립니다.
    *   **유닛 그리기**: `topLevelUnits` 배열을 순회하며 각 최상위 부대의 `draw()` 메서드를 호출합니다. 그러면 각 부대는 자신과 자신의 모든 하위 부대를 재귀적으로 화면에 그립니다.

5.  **사용자 입력 처리 (Event Listeners)**
    *   **마우스 클릭 (`click`)**: 클릭된 위치의 월드 좌표를 계산하여 어떤 부대가 클릭되었는지 찾습니다. 기존에 선택된 부대는 선택 해제하고, 새로 클릭된 부대를 `selectedUnit`으로 지정한 뒤 UI를 업데이트합니다.
    *   **마우스 우클릭 (`contextmenu`)**: 기본 메뉴가 뜨는 것을 막고, 현재 선택된 부대(`selectedUnit`)에게 이동(`moveTo`) 또는 후퇴(`retreatTo`, Shift 키와 함께 클릭 시) 명령을 내립니다.
    *   **마우스 이동 (`mousemove`)**: 현재 마우스의 화면 좌표를 추적합니다.
    *   **창 크기 조절 (`resize`)**: 브라우저 창 크기가 변경될 때 캔버스 크기를 이에 맞게 조절합니다.

---

요약하자면, `main.js`는 **게임의 모든 요소를 하나로 묶어주는 접착제**와 같습니다. 각자 전문화된 기능을 가진 다른 `.js` 파일들을 오케스트라의 지휘자처럼 조율하여 하나의 완전한 게임 경험을 만들어냅니다.